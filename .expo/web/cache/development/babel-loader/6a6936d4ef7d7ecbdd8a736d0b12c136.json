{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport styles from \"./style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Form_valores() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      Primeirovalor = _useState2[0],\n      setPrimeirovalor = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      Segundovalor = _useState4[0],\n      setSegundovalor = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      Terceirovalor = _useState6[0],\n      setTerceirovalor = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      total = _useState8[0],\n      setTotal = _useState8[1];\n\n  var x = parseFloat(total);\n  var por = x;\n\n  function gerarResultado() {\n    setTotal(Number(Primeirovalor) + Number(Segundovalor) + Number(Terceirovalor));\n    Keyboard.dismiss();\n  }\n\n  return _jsxs(View, {\n    style: styles.formContext,\n    children: [_jsxs(View, {\n      style: styles.form,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        value: Valor1,\n        placeholder: \"Digite o primeiro valor.\",\n        keyboardType: \"numeric\",\n        onChangeText: function onChangeText(int) {\n          return setValor1(int);\n        },\n        maxLength: 4\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: Valor2,\n        placeholder: \"Digite o segundo valor.\",\n        keyboardType: \"numeric\",\n        onChangeText: function onChangeText(int) {\n          return setValor2(int);\n        },\n        maxLength: 4\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: Valor3,\n        placeholder: \"Digite o terceiro valor.\",\n        keyboardType: \"numeric\",\n        onChangeText: function onChangeText(int) {\n          return setValor3(int);\n        },\n        maxLength: 4\n      }), _jsx(TouchableOpacity, {\n        style: styles.buttonCalculator,\n        activeOpacity: 0.10,\n        onPress: gerarResultado,\n        children: _jsxs(Text, {\n          style: styles.textbuttonCalculator,\n          children: [\"Calcular Valores \", _jsx(Icon, {\n            name: \"mobile-phone\",\n            size: 40,\n            color: \"#fff\"\n          })]\n        })\n      })]\n    }), _jsx(\"br\", {}), _jsx(\"br\", {}), _jsx(\"br\", {}), _jsx(\"br\", {}), _jsx(View, {\n      children: _jsxs(Text, {\n        style: styles.numberResult,\n        children: [\"Soma dos Valores =\", ' ', total.toFixed(1)]\n      })\n    }), por < 10 && por > 0 && _jsx(Text, {\n      style: styles.information,\n      children: \"Este numero est\\xE1 entre o intervalo de  0 a 10\"\n    }), por >= 11 && por < 20 && _jsx(Text, {\n      style: styles.information,\n      children: \"Este numero est\\xE1 entre o intervalo de 11 a 20\"\n    }), por >= 21 && _jsx(Text, {\n      style: styles.information,\n      children: \"Este numero est\\xE1 entre o intervalo de 21 a infinito\"\n    }), _jsx(\"br\", {}), _jsx(\"br\", {}), _jsx(\"br\", {}), _jsx(\"br\", {}), _jsx(\"br\", {}), _jsx(\"br\", {}), _jsx(\"br\", {}), _jsx(\"br\", {})]\n  });\n}","map":{"version":3,"sources":["C:/Users/geand/Desktop/rafael plano b/src/content/Form_valores/index.js"],"names":["React","useState","Icon","styles","Form_valores","Primeirovalor","setPrimeirovalor","Segundovalor","setSegundovalor","Terceirovalor","setTerceirovalor","total","setTotal","x","parseFloat","por","gerarResultado","Number","Keyboard","dismiss","formContext","form","input","Valor1","int","setValor1","Valor2","setValor2","Valor3","setValor3","buttonCalculator","textbuttonCalculator","numberResult","toFixed","information"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport { Text, TextInput , View, TouchableOpacity } from 'react-native'\r\nimport Icon from 'react-native-vector-icons/FontAwesome';\r\nimport styles from './style'; //importando o style\r\n\r\nexport default function Form_valores () {\r\n\r\n  const [Primeirovalor, setPrimeirovalor] = useState('');\r\n  const [Segundovalor, setSegundovalor] = useState('');\r\n  const [Terceirovalor, setTerceirovalor] = useState('');\r\n  const [total, setTotal] = useState(0);\r\n\r\n  const x = parseFloat(total);\r\n  const por = x ;\r\n\r\n  function gerarResultado() {\r\n      setTotal(Number(Primeirovalor) + Number(Segundovalor) + Number(Terceirovalor));\r\n      Keyboard.dismiss();\r\n  }\r\n\r\n    return (\r\n\r\n      <View style={styles.formContext}>\r\n            <View style={styles.form}>\r\n\r\n\r\n                 {/*campo de digitar*/}\r\n                 <TextInput \r\n                 style={styles.input}\r\n                 value={Valor1}\r\n                 placeholder='Digite o primeiro valor.'\r\n                 keyboardType='numeric'//determinado o tipo de teclado\r\n                 onChangeText={(int) => setValor1(int)}\r\n                 maxLength={4}\r\n                 />\r\n                 \r\n                 \r\n                 {/*campo de digitar*/}\r\n                 <TextInput\r\n                   style={styles.input}\r\n                   value={Valor2}\r\n                   placeholder='Digite o segundo valor.'\r\n                   keyboardType='numeric'//determinado o tipo de teclado\r\n                   onChangeText={(int) => setValor2(int)}\r\n                   maxLength={4}\r\n                 />\r\n\r\n\r\n                 {/*campo de digitar*/}\r\n                 <TextInput\r\n                   style={styles.input}   \r\n                   value={Valor3}\r\n                   placeholder='Digite o terceiro valor.'\r\n                   keyboardType='numeric'//determinado o tipo de teclado\r\n                   onChangeText={(int) => setValor3(int)}\r\n                   maxLength={4}\r\n                 />\r\n\r\n           <TouchableOpacity\r\n            style={styles.buttonCalculator}\r\n            activeOpacity={0.10}\r\n            onPress={gerarResultado}>\r\n            <Text style={styles.textbuttonCalculator}>Calcular Valores <Icon name=\"mobile-phone\" size={40} color=\"#fff\" />\r\n            </Text>\r\n           </TouchableOpacity>\r\n \r\n            </View>\r\n\r\n            <br></br> \r\n            <br></br> \r\n            <br></br> \r\n            <br></br> \r\n\r\n          <View>\r\n\t\t\t      <Text style={styles.numberResult}>\r\n\t\t\t\t     \tSoma dos Valores = \r\n\t\t\t\t    \t{' '}\r\n\t\t\t\t    \t{total.toFixed(1)}\r\n\t\t\t     \t</Text>\r\n\t\t    \t</View>\r\n\r\n\t\t\t{por < 10 && por > 0 && (\r\n\t\t\t\t<Text style={styles.information}>Este numero está entre o intervalo de  0 a 10</Text>\r\n\t\t\t)}\r\n\r\n\t\t\t{por >= 11 && por < 20 && (\r\n\t\t\t\t<Text style={styles.information}>Este numero está entre o intervalo de 11 a 20</Text>\r\n\t\t\t)}\r\n\r\n\t\t\t{por >= 21 &&  (\r\n\t\t\t\t<Text style={styles.information}>Este numero está entre o intervalo de 21 a infinito</Text>\r\n\t\t\t)}\r\n\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n    <br></br>\r\n\r\n      </View>\r\n\r\n\r\n\r\n    );\r\n  }"]},"metadata":{},"sourceType":"module"}